
func generateMipViewports(contentSize image.Point, xFactor, yFactor float64) []image.Rectangle {
	minx, miny := 0, 0
	w, h := float64(contentSize.X), float64(contentSize.Y)

	xStride, yStride := 0.0, 0.0
	if xFactor <= yFactor {
		xStride = 1.0
	}
	if yFactor < xFactor {
		yStride = 1.0
	}

	ret := make([]image.Rectangle, 0)
	for i := 0; w >= 1 && h >= 1; i++ {
		ret = append(ret, image.Rect(minx, miny, minx + int(w), miny + int(h)))

		minx += int(w * xStride)
		miny += int(h * yStride)
		w *= xFactor
		h *= yFactor
	}

	return ret
}

func rectToUV(rect image.Rectangle, textureSize image.Point) (x1, y1, x2, y2 float32) {
	return float32(rect.Min.X) / float32(textureSize.X),
	       float32(rect.Min.Y) / float32(textureSize.Y),
	       float32(rect.Max.X) / float32(textureSize.X),
	       float32(rect.Max.Y) / float32(textureSize.Y)
}

type Recursor struct {
	ctx gl.Context

	oddFBO *Framebuffer
	evenFBO *Framebuffer

	orig gl.Texture

	rects []image.Rectangle

	dc *Drawcall

	width, height int

	iw *ImageWidget
}

func NewRecursor(glctx gl.Context, width, height int) *Recursor {
	var err error
	rec := &Recursor{ width: width, height: height, ctx: glctx, }


	vertexSrc := `
	#version 100
	attribute vec2 position;
	attribute vec2 tc;
	varying mediump vec2 v_TexCoord;

	void main()
	{
		gl_Position = vec4(position, 0.0, 1.0);
		v_TexCoord = tc;
	}
	`

	fragmentSrc := `
	#version 100
	precision mediump float;
	uniform sampler2D tex;
	uniform mediump float step;
	varying mediump vec2 v_TexCoord;
	void main()
	{
		vec4 current = texture2D(tex, v_TexCoord);
		vec4 prev = texture2D(tex, v_TexCoord - vec2(step, 0));

		gl_FragColor = vec4(max(current.r, prev.r), min(current.g, prev.g), 0.0, 1.0);
	}
	`

	program, err := glutil.CreateProgram(glctx, vertexSrc, fragmentSrc)
	if err != nil {
		log.Fatalf("Couldn't build program %v", err)
	}

	rec.dc = NewDrawcall(glctx, program)

	xFactor, yFactor := 2, 1

	oddRects := generateMipViewports(image.Pt(width / xFactor, height / yFactor), 1.0 / float64(xFactor * xFactor), 1.0 / float64(yFactor * yFactor))
	max := 0
	for _, r := range oddRects {
		if r.Max.X > max {
			max = r.Max.X
		}
		if r.Max.Y > max {
			max = r.Max.Y
		}
	}
	max = roundToPower2(max)
	rec.oddFBO = NewFramebuffer(glctx, max, max, gl.RG)

	evenRects := generateMipViewports(image.Pt(width / (xFactor * xFactor), height / (yFactor * yFactor)), 1.0 / float64(xFactor * xFactor), 1.0 / float64(yFactor * yFactor))
	max = 0
	for _, r := range evenRects {
		if r.Max.X > max {
			max = r.Max.X
		}
		if r.Max.Y > max {
			max = r.Max.Y
		}
	}
	max = roundToPower2(max)
	rec.evenFBO = NewFramebuffer(glctx, max, max, gl.RG)

	rec.rects = make([]image.Rectangle, len(oddRects) + len(evenRects))
	//rec.rects[0] = image.Rect(0, 0, width, height)
	for i := 0; i < len(oddRects) * 2; i += 2 {
		rec.rects[i] = oddRects[i / 2]
	}
	for i := 0; i < len(evenRects) * 2; i += 2 {
		rec.rects[i + 1] = evenRects[i / 2]
	}

	/*
	for i, r := range rec.rects {
		fmt.Println(i, ": ", r)
	}
	*/

	w, h := width, height
	vertices := make([]float32, 0, (len(rec.rects)) * 16)

	// Special case for first pass - full original texture
	vertices = append(vertices,
		-1.0,  1.0, 0.0, 1.0,
		-1.0, -1.0, 0.0, 0.0,
		 1.0,  1.0, 1.0, 1.0,
		 1.0, -1.0, 1.0, 0.0,
	 )

	 for i := 1; i < len(rec.rects); i++ {
		rect := rec.rects[i - 1]
		var srcSize image.Point
		if (i & 1) != 0 {
			srcSize = image.Pt(rec.oddFBO.Width, rec.oddFBO.Height)
		} else {
			srcSize = image.Pt(rec.evenFBO.Width, rec.evenFBO.Height)
		}

		x1, y1, x2, y2 := rectToUV(rect, srcSize)
		w /= xFactor
		h /= yFactor

		vertices = append(vertices,
			-1.0,  1.0, x1, y2,
			-1.0, -1.0, x1, y1,
			 1.0,  1.0, x2, y2,
			 1.0, -1.0, x2, y1,
		 )
	}

	/*
	for i := 0; i < len(rec.rects) - 1; i++ {
		fmt.Println(vertices[i * 16 + 0: i * 16 + 0 + 4])
		fmt.Println(vertices[i * 16 + 4: i * 16 + 4 + 4])
		fmt.Println(vertices[i * 16 + 8: i * 16 + 8 + 4])
		fmt.Println(vertices[i * 16 + 12: i * 16 + 12 + 4])
		fmt.Println("---")
	}
	*/

	vData := f32.Bytes(binary.LittleEndian, vertices...)
	rec.dc.SetVertexData(vData)
	rec.dc.SetIndices([]uint16{0, 1, 2, 3})
	rec.dc.SetAttribute("position", 2, 4, 0)
	rec.dc.SetAttribute("tc", 2, 4, 2)

	infile, err := os.Open("bb.png")
	if err != nil {
		panic(err)
	}
	defer infile.Close()

	img, err := png.Decode(infile)
	if err != nil {
		panic(err)
	}

	rec.orig = NewTextureFromImage(glctx, img.(*image.NRGBA))

	rec.iw = NewImageWidget()

	return rec
}

func (rec *Recursor) Run() {
	// Special case:
	rec.dc.SetAttribute("position", 2, 4, 0)
	rec.dc.SetAttribute("tc", 2, 4, 2)
	rec.dc.SetTexture("tex", rec.orig)
	rec.dc.SetViewport(rec.rects[0])
	rec.dc.SetFBO(rec.oddFBO.Framebuffer)
	rec.dc.Draw()

	src := rec.oddFBO
	dst := rec.evenFBO
	for i, r := range rec.rects[1:] {
		rec.dc.SetUniformf("step", []float32{ 1.0 / float32(src.Width) })
		rec.dc.SetAttribute("position", 2, 4, (i + 1) * 4 * 4)
		rec.dc.SetAttribute("tc", 2, 4, 2 + (i + 1) * 4 * 4)
		rec.dc.SetTexture("tex", src.Tex)
		rec.dc.SetViewport(r)
		rec.dc.SetFBO(dst.Framebuffer)
		rec.dc.Draw()

		tmp := src
		src = dst
		dst = tmp
	}
}

func (rec *Recursor) Draw(into *cairo.Surface, at image.Rectangle) {
	w2 := at.Bounds().Dx() / 2
	left := image.Rect(at.Bounds().Min.X, at.Bounds().Min.Y, at.Bounds().Min.X + w2, at.Bounds().Max.Y)
	right := image.Rect(at.Bounds().Min.X + w2, at.Bounds().Min.Y, at.Bounds().Max.X, at.Bounds().Max.Y)


	rec.Run()
	rec.dc.ctx.Finish()

	rec.iw.SetImage(rec.oddFBO.GetImage(rec.ctx))
	rec.iw.Draw(into, left)

	rec.iw.SetImage(rec.evenFBO.GetImage(rec.ctx))
	rec.iw.Draw(into, right)
}

type Thresholder struct {
	ctx gl.Context
	width, height int
	dc *Drawcall
	rec *Recursor

	Tex gl.Texture
	fbo *Framebuffer

	srcImage image.Image

	iw *ImageWidget
}

func NewThresholder(glctx gl.Context, width, height int) *Thresholder {
	var err error
	th := &Thresholder{ width: width, height: height, ctx: glctx, }

	th.rec = NewRecursor(glctx, width, height)

	vertexSrc := `
	#version 100
	attribute vec2 position;
	attribute vec2 tc;
	varying mediump vec2 v_TexCoord;

	void main()
	{
		gl_Position = vec4(position, 0.0, 1.0);
		v_TexCoord = tc;
	}
	`

	fragmentSrc := `
	#version 100
	precision mediump float;
	uniform sampler2D tex;
	uniform sampler2D mmTex;
	uniform float mmX;
	varying mediump vec2 v_TexCoord;
	void main()
	{
		vec4 mm = texture2D(mmTex, vec2(mmX, v_TexCoord.y));
		vec4 rgb = texture2D(tex, v_TexCoord);

		float sf = 1.0 / (mm.r - mm.g);

		float res = (rgb.r - mm.g) * sf;

		res = step(0.5, res);

		gl_FragColor = vec4(res, res, res, 1.0);
	}
	`

	program, err := glutil.CreateProgram(glctx, vertexSrc, fragmentSrc)
	if err != nil {
		log.Fatalf("Couldn't build program %v", err)
	}

	th.dc = NewDrawcall(glctx, program)
	th.dc.SetViewport(image.Rect(0, 0, width, height))

	th.fbo = NewFramebuffer(glctx, width, height, gl.RGBA)

	th.dc.SetFBO(th.fbo.Framebuffer)

	vData := f32.Bytes(binary.LittleEndian,
		-1.0,  1.0, 0.0, 1.0,
		-1.0, -1.0, 0.0, 0.0,
		 1.0,  1.0, 1.0, 1.0,
		 1.0, -1.0, 1.0, 0.0,
	)
	th.dc.SetVertexData(vData)
	th.dc.SetIndices([]uint16{0, 1, 2, 3})
	th.dc.SetAttribute("position", 2, 4, 0)
	th.dc.SetAttribute("tc", 2, 4, 2)

	infile, err := os.Open("bb.png")
	if err != nil {
		panic(err)
	}
	defer infile.Close()

	th.srcImage, err = png.Decode(infile)
	if err != nil {
		panic(err)
	}

	tex := NewTextureFromImage(glctx, th.srcImage.(*image.NRGBA))

	th.dc.SetTexture("tex", tex)
	//th.dc.SetUniformf("step", []float32{-1 / 16.0})

	th.iw = NewImageWidget()

	return th
}

func (th *Thresholder) Draw(into *cairo.Surface, at image.Rectangle) {

	th.rec.Run()

	var src *Framebuffer
	if len(th.rec.rects) & 1 == 0 {
		src = th.rec.evenFBO
	} else {
		src = th.rec.oddFBO
	}
	x := float32(th.rec.rects[len(th.rec.rects) - 1].Min.X)
	th.dc.SetTexture("mmTex", src.Tex)
	th.dc.SetUniformf("mmX", []float32{ x / float32(src.Width) })

	th.dc.Draw()

	w2 := at.Bounds().Dx() / 2
	left := image.Rect(at.Bounds().Min.X, at.Bounds().Min.Y, at.Bounds().Min.X + w2, at.Bounds().Max.Y)
	right := image.Rect(at.Bounds().Min.X + w2, at.Bounds().Min.Y, at.Bounds().Max.X, at.Bounds().Max.Y)

	th.iw.SetImage(th.srcImage)
	th.iw.Draw(into, left)

	th.iw.SetImage(th.fbo.GetImage(th.ctx))
	th.iw.Draw(into, right)
}

